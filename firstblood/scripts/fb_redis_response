#!/usr/bin/env python
# -*- coding: UTF-8 -*-
import sys
import optparse
import binascii

from os.path import basename
from StringIO import StringIO

INFO='24313832360d0a23205365727665720d0a72656469735f76657273696f6e3a322e382e31370d0a72656469735f6769745f736861313a30303030303030300d0a72656469735f6769745f64697274793a300d0a72656469735f6275696c645f69643a666163323238643139323865393265300d0a72656469735f6d6f64653a7374616e64616c6f6e650d0a6f733a4c696e757820322e362e33322d3232302e372e312e656c362e7838365f3634207838365f36340d0a617263685f626974733a36340d0a6d756c7469706c6578696e675f6170693a65706f6c6c0d0a6763635f76657273696f6e3a342e342e370d0a70726f636573735f69643a31313038310d0a72756e5f69643a643630333363656235623836333766333764663539616534646664363664373463653632343033640d0a7463705f706f72743a363337390d0a757074696d655f696e5f7365636f6e64733a31333231323937370d0a757074696d655f696e5f646179733a3135320d0a687a3a31300d0a6c72755f636c6f636b3a393932303131390d0a636f6e6669675f66696c653a2f6574632f72656469732f72656469732e636f6e660d0a0d0a2320436c69656e74730d0a636f6e6e65637465645f636c69656e74733a353935360d0a636c69656e745f6c6f6e676573745f6f75747075745f6c6973743a300d0a636c69656e745f626967676573745f696e7075745f6275663a300d0a626c6f636b65645f636c69656e74733a300d0a0d0a23204d656d6f72790d0a757365645f6d656d6f72793a3132353635373635360d0a757365645f6d656d6f72795f68756d616e3a3131392e38344d0d0a757365645f6d656d6f72795f7273733a36333937393532300d0a757365645f6d656d6f72795f7065616b3a3236383737333934340d0a757365645f6d656d6f72795f7065616b5f68756d616e3a3235362e33324d0d0a757365645f6d656d6f72795f6c75613a33333739320d0a6d656d5f667261676d656e746174696f6e5f726174696f3a302e35310d0a6d656d5f616c6c6f6361746f723a6a656d616c6c6f632d332e362e300d0a0d0a232050657273697374656e63650d0a6c6f6164696e673a300d0a7264625f6368616e6765735f73696e63655f6c6173745f736176653a35360d0a7264625f6267736176655f696e5f70726f67726573733a300d0a7264625f6c6173745f736176655f74696d653a313531393836393236380d0a7264625f6c6173745f6267736176655f7374617475733a6f6b0d0a7264625f6c6173745f6267736176655f74696d655f7365633a300d0a7264625f63757272656e745f6267736176655f74696d655f7365633a2d310d0a616f665f656e61626c65643a300d0a616f665f726577726974655f696e5f70726f67726573733a300d0a616f665f726577726974655f7363686564756c65643a300d0a616f665f6c6173745f726577726974655f74696d655f7365633a2d310d0a616f665f63757272656e745f726577726974655f74696d655f7365633a2d310d0a616f665f6c6173745f6267726577726974655f7374617475733a6f6b0d0a616f665f6c6173745f77726974655f7374617475733a6f6b0d0a0d0a232053746174730d0a746f74616c5f636f6e6e656374696f6e735f72656365697665643a34313030320d0a746f74616c5f636f6d6d616e64735f70726f6365737365643a393234383134340d0a696e7374616e74616e656f75735f6f70735f7065725f7365633a360d0a72656a65637465645f636f6e6e656374696f6e733a300d0a73796e635f66756c6c3a300d0a73796e635f7061727469616c5f6f6b3a300d0a73796e635f7061727469616c5f6572723a300d0a657870697265645f6b6579733a323236300d0a657669637465645f6b6579733a300d0a6b657973706163655f686974733a3233323735340d0a6b657973706163655f6d69737365733a3230373733350d0a7075627375625f6368616e6e656c733a3232370d0a7075627375625f7061747465726e733a31300d0a6c61746573745f666f726b5f757365633a343230300d0a0d0a23205265706c69636174696f6e0d0a726f6c653a6d61737465720d0a636f6e6e65637465645f736c617665733a300d0a6d61737465725f7265706c5f6f66667365743a300d0a7265706c5f6261636b6c6f675f6163746976653a300d0a7265706c5f6261636b6c6f675f73697a653a313034383537360d0a7265706c5f6261636b6c6f675f66697273745f627974655f6f66667365743a300d0a7265706c5f6261636b6c6f675f686973746c656e3a300d0a0d0a23204350550d0a757365645f6370755f7379733a373832382e38350d0a757365645f6370755f757365723a373634322e39360d0a757365645f6370755f7379735f6368696c6472656e3a33312e34350d0a757365645f6370755f757365725f6368696c6472656e3a362e37310d0a0d0a23204b657973706163650d0a6462323a6b6579733d32372c657870697265733d302c6176675f74746c3d300d0a0d0a'

CMDMAP = {
        'auth':'+OK\r\n',
        'ping':'+PONG\r\n',
        'info':binascii.unhexlify(INFO),
        "setnx":":1\r\n",
        "del":":1\r\n",
        "exists":":1\r\n",
        "incr":":1\r\n",
        "incrby":":1\r\n",
        "decr":":1\r\n",
        "decrby":":1\r\n",
        "dbsize":":1\r\n",
        "lastsave":":1\r\n",
        "renamenx":":1\r\n",
        "move":":1\r\n",
        "llen":":1\r\n",
        "sadd":":1\r\n",
        "srem":":1\r\n",
        "sismember":":1\r\n",
        "scard":":1\r\n",

        'ttl':":-1\r\n",

        "get":'$6\r\nnfoobar\r\n',
        "scan":'*2\r\n$1\r\n0\r\n*1\r\n$21\r\n_kombu.binding.celery\r\n',
        'sscan':'*2\r\n$1\r\n0\r\n*1\r\n$6\r\ncelery\r\n',
        'type':'+set\r\n',

        }

class Request(object):

    cmd = ''
    content = ''

    def __init__(self, payload):
        self.payload = payload
        self.parseRequest()

    def parseRequest(self):
        reqs = self.payload.split('\r\n', 1)
        data_type = reqs[0][0]
        if data_type != '*':
            return

        argv = int(reqs[0][1:])

        args = reqs[1].split('\r\n', 2)
        if len(args) == 2:
            self.cmd = args[1]
        elif len(args) > 2:
            self.cmd = args[1]
            self.content = args[2]
        else:
            return

    def __repr__(self):
        _str = "%s %s" % (self.cmd, self.content)
        return _str

class ResponseHttp(object):

    resp = ''

    def __init__(self, request):
        self.request = request

    def __repr__(self):
        return self.resp

    def getResponse(self):
        cmd = self.request.cmd.lower()
        self.resp = CMDMAP.get(cmd, '+OK\r\n')
        return self.__repr__()

def main(payload):
    req = Request(payload)
    res = ResponseHttp(req)
    data = res.getResponse()
    sys.stdout.write('%s' % data)

def usage():
    fn = basename(sys.argv[0])
    s = StringIO()
    s.write("%s [options] payload\n" % fn)
    s.write("\t%s 'R0VUIC8gSFRUUC8xLjENCkhvc3Q6IDEyNy4wL' -d\n" % fn)
    s.seek(0)
    return s.read()

def parseOption():
    parser = optparse.OptionParser(usage=usage())
    parser.add_option("-d", "--debug", action="store_true", dest="debug", default=False, help="Debug")
    return parser

if __name__ == '__main__':
    parser = parseOption()
    options, args = parser.parse_args()
    payload = ''
    if options.debug:
        import base64, zlib
        testpayload = base64.b64decode(args[0])
        payload = zlib.decompress(testpayload)
        sys.stderr.write('%s\n\n' % str(payload))
    elif len(args) > 0:
        payload = args[0]
    else:
        sys.exit(1)
    try:
        main(payload)
    except BaseException, e:
        sys.stderr.write('%s\n' % str(e))
        sys.exit(2)
    sys.exit(0)
