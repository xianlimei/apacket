#!/usr/bin/env python
# -*- coding: UTF-8 -*-
import sys
import optparse
import json
import random
import time
import re

from datetime import datetime
from os.path import basename
from StringIO import StringIO

import es
import jsonrpc
import phpadmin
import boa
import belkin

http_server = (
	#"Tengine",
	#"nginx/1.10.0",
	"Apache/2.2.21",
	"gSOAP/2.7",
	"GoAhead-Webs",
	"GoAhead-http",
	"RomPager/4.07 UPnP/1.0",
	"lighttpd/1.4.34",
	#"Lighttpd/1.4.28",
	#"lighttpd/1.4.31",
	"Linux/2.x UPnP/1.0 Avtech/1.0",
	"P-660HW-T1 v3",
	#"U S Software Web Server",
	"Netwave IP Camera",
        #"Boa/0.94.14rc21",
        "DVRDVS-Webs",
        "CouchDB/2.1.0 (Erlang OTP/17)",
        "miniupnpd/1.0 UPnP/1.0",
        "DasanNetwork Solution",
        )

http_authenticate = ( 
	'''WWW-Authenticate: Basic realm="iPEX Internet Cafe"''',
	'''WWW-Authenticate: Digest realm="IgdAuthentication", domain="/", nonce="N2UyNjgxMjA6NjQ1MWZiOTA6IDJlNjI5NDA=", qop="auth", algorithm=MD5''',
	'''WWW-Authenticate: Basic realm="NETGEAR DGN1000 "''',
	'''WWW-Authenticate: Digest realm="GoAhead", domain=":81",qop="auth", nonce="405448722b302b85aa6ef2b444ea6b5c", opaque="5ccc069c403ebaf9f0171e9517f40e41",algorithm="MD5", stale="FALSE"''',
	'''WWW-Authenticate: Basic realm="HomeHub"''',
	'''WWW-Authenticate: Basic realm="MOBOTIX Camera User"''',
	'''Authorization: Basic aHR0cHdhdGNoOmY=''',
        )

http_body = "<?xml version=\"1.0\" encoding=\"utf-8\"?><base64Binary xmlns=\"http://micros-hosting.com/EGateway/\">base64Binary</base64Binary>\
<html><head><title>Document Error: Unauthorized</title></head><body><h2> The Cross Web Server Access Error: Unauthorized</h2><p>Access to this document requires a User ID</p>CGI process file does not exist \
<form name=\"form1\" method=\"post\" action=\"login.aspx\" onsubmit=\"javascript:return WebForm_OnSubmit();\" id=\"form1\">\
<input name=\"UserName\" type=\"text\" id=\"UserName\" class=\"button1\" style=\"width:100px;\" />\
<input name=\"UserPass\" type=\"password\" id=\"UserPass\" class=\"button1\" style=\"width:100px;\" />\
<input type=\"submit\" name=\"Button1\" value=\"login\" onclick=\"login\" id=\"Button1\" class=\"button2\" />\
</form>\
</body></html>"

http_login_body = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> \
<html xmlns=\"http://www.w3.org/1999/xhtml\"> \
<head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><title>login</title></head> \
<body> The Cross Web Server \
<form name=\"form1\" method=\"post\" action=\"login.aspx\" onsubmit=\"javascript:return WebForm_OnSubmit();\" id=\"form1\">\
<input name=\"UserName\" type=\"text\" id=\"UserName\" class=\"button1\" style=\"width:100px;\" />\
<input name=\"UserPass\" type=\"password\" id=\"UserPass\" class=\"button1\" style=\"width:100px;\" />\
<input type=\"submit\" name=\"Button1\" value=\"login\" onclick=\"login\" id=\"Button1\" class=\"button2\" />\
</form>\
<span id=\"L_copyright\"><a href='http://www.cbcms.cn' target='_blank' class='tt7'><strong><font color='#CCCCCC' face='Arial, Helvetica, sans-serif'>Powered By</font><font face='Arial, Helvetica, sans-serif'> cbcms <font color='#FFCC00'>v1.09.12.19</font></font></strong></a></span>\
</body>\
</html>"

http_code = [
        200,
        500,
        401,
        ]

class Request(object):

    method = ''
    uri = ''
    version = ''
    headers = {} 
    body = ''
    
    def __init__(self, payload):
        self.payload = payload
        self.parseRequest()

    def parseRequest(self):
        line = self.payload.split('\r\n', 1)
        self.method, self.uri, self.version = line[0].split(' ')
        head = ''
        if '\r\n\r\n' in self.payload:
            head, body = self.payload.split('\r\n\r\n', 1)
            self.body = body
        else:
            head = self.payload
        heads = head.split('\r\n')
        self.uri = self.uri.replace('//', '/')

        if len(heads) < 2:
            return

        for line in heads[1:]:
            if not line:continue
            try:
                k, v = line.split(':', 1)
                self.headers.setdefault(k.lower(), v.strip())
            except:
                pass


    def __repr__(self):
        _str = '%s %s %s\n%s\n%s' % (
                self.method, self.uri, self.version, 
                json.dumps(self.headers), 
                self.body)
        return _str

class ResponseHttp(object):

    code = 200
    status = 'ok'
    version = 'HTTP/1.1'


    headers_raw = []
    headers = {
            'Connection':'keep-alive',
            'Content-Type':'text/html; charset=UTF-8',
            'Pragma': 'no-cache',
            'Cache-Control':'no-cache',
            }

    body = http_body

    def __init__(self, request):
        self.request = request
        self.date = datetime.now().isoformat()
        self.seed = random.randint(0, 1)

    def __repr__(self):
        response_line = '%s %s %s' % (self.version, self.code, self.status)
        headers = [] 
        for k, v in self.headers.iteritems():
            headers.append('%s: %s' % (k, v))
        headers.extend(self.headers_raw)

        if self.body:
            content_len = len(self.body)
            headers.append('Content-Length: %s' % content_len)

        res = '%s\r\n%s\r\n\r\n%s' % (response_line, '\r\n'.join(headers), self.body)
        return res

    def defaultResponse(self):
        idx = random.randint(0, len(http_server)-1)
        server = http_server[idx]

        idx = random.randint(0, len(http_authenticate)-1)
        auth = http_authenticate[idx]

        idx = random.randint(0, len(http_code)-1)
        self.code = http_code[idx]

        self.headers['Server'] = server
        self.headers['Date'] = self.date
        self.headers_raw.append(auth)
        if self.request.body:
            self.body = self.request.body
        return


    def esResponse(self):
        body = ''

        uri = self.request.uri

        content_type = "application/json"
    
        if uri == '/':
            body = es.resBanner
        elif uri.startswith('/_nodes'):
            body = es.resNodes
        elif uri.startswith('/_cluster/stats'):
            es.resClusterStats['timestamp'] = int(time.time())
            body = es.resClusterStats
        elif uri.startswith('/_stats/indexing'):
            content_type = "text/plain"
            body = es.resStatsIndexing
        elif uri.startswith('/_cat/indices'):
            body = es.resCatIndices
        elif uri.startswith('/_search'):
            out = 'root'
            key = ''
            try:
                json_body = json.loads(self.request.body)
                key = json_body.get('script_fields', {}).keys()[0]
            except BaseException, e:
                sys.stderr.write("%s\n" % e)
            try:
                script = json_body.get('script_fields', {}).get(key, {}).get('script')
                tag = '.getRuntime().exec("'
                idx = script.find(tag)
                if idx != -1:
                    script = script[idx+len(tag):]
                    idx = script.find('"')
                    if idx != -1:
                        cmd = script[:idx]
                        cmds = cmd.split(' ')
                        if cmds[0] == 'echo':
                            out = cmds[1]
            except BaseException, e:
                sys.stderr.write("%s\n" % e)
            if key:
                es.resCmd['hits']['hits'][0]['fields'] = {key:out}
            body = es.resCmd #TODO 
        else:
            body = es.resBanner 

        if body:
            self.headers = {}
            self.headers_raw.append('Content-Type: %s; charset=UTF-8' % content_type)
            if content_type == "application/json":
                self.body = json.dumps(body)
            else:
                self.body = body

    def mctpResponse(self):
        self.version = 'V%s' % self.request.version
        self.headers = {}
        self.headers_raw.append('Content-Type: %s' % self.request.headers.get('content-type', 'text/HDP'))
        self.headers_raw.append('CSeq: %s' % self.request.headers.get('cseq', '6'))
        self.headers_raw.append('Return-Code: 0')

        segmentseq = self.request.headers.get('segment-seq')
        try:
            segmentseq = int(segmentseq)
            self.headers_raw.append('Segment-Seq: %s' % segmentseq)
            segmentseq += 1
            self.headers_raw.append('Segment-Num: %s' % segmentseq)
        except:
            pass
        self.body = 'eric\r\n111222\r\n111222\nadmin\r\n111222'
        self.headers_raw.append('Data-Length: %s' % len(self.body))

    def rtspResponse(self):
        self.version = '%s' % self.request.version
        self.headers = {}
        self.headers_raw.append('Content-Type: %s' % self.request.headers.get('accept', 'application/sdp'))
        self.headers_raw.append('CSeq: %s' % self.request.headers.get('cseq', '2'))
        self.headers_raw.append('Content-Base: %s' % self.request.uri)
        self.headers_raw.append('Return-Code: 0')
        self.body = 'm=video 0 RTP/AVP 96\r\na=control:streamid=0\r\na=range:npt=0-7.741000\r\na=length:npt=7.741000\r\na=StreamName:string;"hinted video track"\r\nm=audio 0 RTP/AVP 97\r\na=StreamName:string;"hinted audio track"'

    def jsonrpcResponse(self):
        self.version = '%s' % self.request.version
        self.headers = {}
        self.headers_raw.append('Content-Type: application/json')
        try:

            request = json.loads(self.request.body)
            result = jsonrpc.result.get(request.get('method'))
            self.body = request
            self.body['result'] = result
            self.body = json.dumps(self.body)
        except BaseException, e:
            sys.stderr.write('%s\n' % str(e))

    def sipResponse(self):
        self.version = '%s' % self.request.version
        self.headers = self.request.headers 
        self.body = ''

    def phpadminResponse(self):
        self.headers = {}
        self.headers_raw.append('Content-Type:text/html; charset=UTF-8')
        self.headers_raw.append('Server:Apache')
        self.body = phpadmin.body


    def jbossResponse(self):
        self.headers = {}
        self.headers_raw.append('Content-Type:text/html; charset=UTF-8')
        self.headers_raw.append('Server:Apache')
        if self.seed != 1:
            self.code = 500
            self.status = "ServerError"
        self.body = "<html><head><title>Jboss jboss</title></head><body>Jboss jboss</body></html>"

    def mooResponse(self):
        self.headers = {}
        h = [
                'access-control-allow-origin:*',
                'cache-control:max-age=86400',
                'cf-cache-status:HIT',
                'cf-ray:3d8559d72f509354-SJC',
                'etag:"5a4ef825-a725"',
                'server:cloudflare-nginx',
                'status:200',
                'vary:Accept-Encoding',
                'via:1.1 vegur',
                ]
        self.headers_raw.extend(h)
        self.body = "<html><head><title>moo MOO</title></head><body>moo MOO</body></html>"

    def ipmiResponse(self):
        self.headers = {}
        h = [
                'SERVER: Linux/2.6.30.9-cig-4, UPnP/1.0, Portable SDK for UPnP devices/1.6.18',
                'CONNECTION: close',
                'CONTENT-TYPE: text/html',
                ]
        self.headers_raw.extend(h)
        if self.seed  == 1:
            self.body = '<html><body><h1>200 OK</h1></body></html>'
        else:
            self.code = 500
            self.status = 'Internal Server Error'
            self.body = '<html><body><h1>500 Internal Server Error</h1></body></html>'

    def intelAMTResponse(self):
        if self.seed  == 1:
            self.headers = {}
            h = [
                'Cache-Control:no cache',
                'Content-Type:text/html',
                'Server:Intel(R) Active Management Technology 9.1.30',
                ]
            self.headers_raw.extend(h)
            self.body='''<html><head><link rel="stylesheet" href="styles.css">
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
                <title>Intel&reg; Active Management Technology</title></head>
                <body>
                <table class="header">
                <tr><td valign="top" nowrap="nowrap">
                <p class="top1">Intel<font class="r"><sup>&reg;</sup></font> Active Management Technology</td>
                <td valign="top"><img src="logo.gif" align="right" alt="Intel"></td></tr>
                </table>

                <h1>Log On</h1>
                <P>Log on to Intel&reg; Active Management Technology on this computer.</p>
                <P><form METHOD="GET" action="index.htm"><h2><input type="submit" value="  Log On... ">
                </h2></form></p></body></html>
                '''

    def cbcmsResponse(self):
        self.headers['Server'] = 'Microsoft-IIS/6.0'
        self.headers['Date'] = self.date
        self.body = http_login_body

    def boaResponse(self):
        h = [
                'Accept-Ranges:bytes',
                'Connection:close',
                'Content-Type:text/html',
                'Server:Boa/0.94.14rc21',
                'Via:1.0 Hello (squid/3.1.23)',
                'X-Cache:MISS from Hello',
                'X-Cache:MISS from Hello',
                'X-Cache-Lookup:MISS from Hello:8080',
                'X-Cache-Lookup:MISS from Hello:8080',
                ]
        self.headers = {
                'Date':self.date,
                }
        self.headers_raw.extend(h)
        self.body = boa.boa

    def couchdbResponse(self):
        uri = self.request.uri.lower()
        h = [
                'Server:CouchDB/2.1.0 (Erlang OTP/17)',
                'Content-Type:application/json',
                ]
        self.headers = {
                'Date':self.date,
                }
        self.headers_raw.extend(h)

        if '/_users/org.couchdb.user' in uri:
            self.code = 201
            self.status = 'Created'
            reqbody = json.loads(self.request.body)
            user = reqbody.get('name', 'root')
            self.body = json.dumps({'ok':'true', 'id':"org.couchdb.user:%s" %  user, 'rev':'1-c0d78363e89f834bfaefa3a6dcdf0996'}) 
        elif '/_membership' in uri:
            self.code = 200
            self.status = 'ok'
            self.body = json.dumps({'all_nodes':["nonode@nohost"],'cluster_nodes':["nonode@nohost"]})
        else:
            self.body = json.dumps({'ok':'true'})
    
    def belkinResponse(self):
        self.headers = {
                'Date':self.date,
                }

        uri = self.request.uri.lower()
        if '/langchg.cgi' in uri or '/adv_wifidef.cgi' in uri:
            h = belkin.H_HTML.split('\n')
            self.headers_raw.extend(h)
            self.body = belkin.passwd_leak
        elif '/dev.htm' in uri:
            h = belkin.H_HTML.split('\n')
            self.headers_raw.extend(h)
            self.body = belkin.shell
        else:
            h = belkin.H_TXT.split('\n')
            self.headers_raw.extend(h)
            self.body = 'returned error: -998'

    def tmpResponse(self):
        self.headers = {
                'Date':self.date,
                'Accept-Ranges': 'bytes',
                'Content-Type': 'text/javascript',
                'Server': 'DasanNetwork Solution',
                }
        self.body = "<html>411 - Length Required<html>"

    def getResponse(self):
        port_map = {
                '9200':self.esResponse,
                '49152':self.ipmiResponse,
                '16992':self.intelAMTResponse,
                '5984':self.couchdbResponse,
                '8080':self.tmpResponse,
                }

        url_map = {
                #jboss
                r'^/invoker/readonly.*':self.jbossResponse,
                r'^/invoker/JMXInvokerServlet.*':self.jbossResponse,
                r'^/web-console/ServerInfo.jsp.*':self.jbossResponse,
                r'^/jmx-console/HtmlAdaptor.*':self.jbossResponse,

                r'.*/scripts/setup\.php.*':self.phpadminResponse,
                r'^/news/admin/login\.aspx.*':self.cbcmsResponse,
                r'^/langchg\.cgi$':self.belkinResponse,
                r'^/adv_wifidef\.cgi$':self.belkinResponse,
                r'^/dev\.htm$':self.belkinResponse,
                r'^/proxy\.cgi\?chk&':self.belkinResponse,
                }

        host = self.request.headers.get('host')
        port = 80
        try:
            host, port = host.split(':')
        except:
            pass
        port = str(port)

        version = self.request.version.lower()
        uri = self.request.uri.lower()
        uri.replace('//', '/')

        setResponse = None
        if 'mctp/' in version:
            setResponse = self.mctpResponse
        elif 'rtsp/' in version:
            setResponse = self.rtspResponse
        elif 'sip/' in version:
            setResponse = self.sipResponse
        elif '"jsonrpc":' in self.request.body:
            setResponse = self.jsonrpcResponse
        elif 'cgi-bin/login.cgi' in uri:
                setResponse = self.boaResponse
        elif port_map.get(port):
            setResponse = port_map.get(port)
        else:
            for reg, func in url_map.iteritems():
                regex = re.compile(reg, re.I)
                if regex.match(uri):
                    setResponse = func
                    break
        if not setResponse:
            setResponse = self.defaultResponse
        setResponse()
        return self.__repr__()

def main(payload):
    req = Request(payload)
    res = ResponseHttp(req)
    data = res.getResponse()
    sys.stdout.write('%s' % data)

def usage():
    fn = basename(sys.argv[0])
    s = StringIO()
    s.write("%s [options] payload\n" % fn)
    s.write("\t%s 'R0VUIC8gSFRUUC8xLjENCkhvc3Q6IDEyNy4wL' -d\n" % fn)
    s.seek(0)
    return s.read()

def parseOption():
    parser = optparse.OptionParser(usage=usage())
    parser.add_option("-d", "--debug", action="store_true", dest="debug", default=False, help="Debug")
    return parser

if __name__ == '__main__':
    parser = parseOption()
    options, args = parser.parse_args()
    payload = ''
    if options.debug:
        import base64, zlib
        testpayload = base64.b64decode(args[0])
        payload = zlib.decompress(testpayload)
        sys.stderr.write('%s\n\n' % str(payload))
    elif len(args) > 0:
        payload = args[0]
    else:
        sys.exit(1)
    try:
        main(payload)
    except BaseException, e:
        sys.stderr.write('%s\n' % str(e))
        sys.exit(2)
    sys.exit(0)
