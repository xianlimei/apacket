#!/usr/bin/env python
# -*- coding: UTF-8 -*-
import sys
import optparse
import json
import random
import time
import re
import base64
import os
import urllib2

from datetime import datetime
from os.path import basename
from StringIO import StringIO

import es
import jsonrpc
import phpadmin
import boa
import belkin
import hp_hbase
import onvif
import HP_iLO
import docker
import avtech
from http_default_body import http_body

PROJECT_HOME = os.path.split(os.path.realpath(__file__))[0]

http_server = (
	#"Tengine",
	#"nginx/1.10.0",
        "micro_httpd",
	"Apache/2.2.21",
	"gSOAP/2.7",
	"GoAhead-Webs",
	"GoAhead-http",
	"RomPager/4.07 UPnP/1.0",
	"lighttpd/1.4.34",
	#"Lighttpd/1.4.28",
	#"lighttpd/1.4.31",
	"Linux/2.x UPnP/1.0 Avtech/1.0",
	"P-660HW-T1 v3",
	#"U S Software Web Server",
	"Netwave IP Camera",
        #"Boa/0.94.14rc21",
        "DVRDVS-Webs",
        "CouchDB/2.1.0 (Erlang OTP/17)",
        "miniupnpd/1.0 UPnP/1.0",
        "DasanNetwork Solution",
        "HP-iLO-Server/1.30",
        "OS 1.0 UPnP/1.0 Realtek/V1.3",
        "IceWarp/12.0.2.0 x64",
        "uc-httpd/1.0.0",
        "uc-httpd 1.0.0",
        "OrientDB Server v.2.2.22 (build fb2b7d321ea8a5a5b18a82237049804aace9e3de)",
        "Microsoft-IIS/6.0",
        "Docker/17.05.0-ce (linux)",
        "Jetty(9.4.z-SNAPSHOT)",
        )

http_authenticate = ( 
	'''WWW-Authenticate: Basic realm="iPEX Internet Cafe"''',
	'''WWW-Authenticate: Digest realm="IgdAuthentication", domain="/", nonce="N2UyNjgxMjA6NjQ1MWZiOTA6IDJlNjI5NDA=", qop="auth", algorithm=MD5''',
	'''WWW-Authenticate: Basic realm="NETGEAR DGN1000 "''',
	'''WWW-Authenticate: Digest realm="GoAhead", domain=":81",qop="auth", nonce="405448722b302b85aa6ef2b444ea6b5c", opaque="5ccc069c403ebaf9f0171e9517f40e41",algorithm="MD5", stale="FALSE"''',
	'''WWW-Authenticate: Basic realm="HomeHub"''',
	'''WWW-Authenticate: Basic realm="MOBOTIX Camera User"''',
	'''Authorization: Basic aHR0cHdhdGNoOmY=''',
	'''WWW-Authenticate: Basic realm="Tomcat Manager Application"''',
        '''WWW-Authenticate: Basic realm="Broadband Router"''',
        )

http_login_body = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> \
<html xmlns=\"http://www.w3.org/1999/xhtml\"> \
<head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><title>login</title></head> \
<body> The Cross Web Server \
<form name=\"form1\" method=\"post\" action=\"login.aspx\" onsubmit=\"javascript:return WebForm_OnSubmit();\" id=\"form1\">\
<input name=\"UserName\" type=\"text\" id=\"UserName\" class=\"button1\" style=\"width:100px;\" />\
<input name=\"UserPass\" type=\"password\" id=\"UserPass\" class=\"button1\" style=\"width:100px;\" />\
<input type=\"submit\" name=\"Button1\" value=\"login\" onclick=\"login\" id=\"Button1\" class=\"button2\" />\
</form>\
<span id=\"L_copyright\"><a href='http://www.cbcms.cn' target='_blank' class='tt7'><strong><font color='#CCCCCC' face='Arial, Helvetica, sans-serif'>Powered By</font><font face='Arial, Helvetica, sans-serif'> cbcms <font color='#FFCC00'>v1.09.12.19</font></font></strong></a></span>\
</body>\
</html>"

http_code = [
        200,
        500,
        401,
        ]

HEADERS = {
            'Connection':'keep-alive',
            'Content-Type':'text/html; charset=UTF-8',
            'Pragma': 'no-cache',
            'Cache-Control':'no-cache',
            'Api-Version': '1.29',
            }


class Request(object):

    method = ''
    uri = ''
    version = ''
    headers = {} 
    body = ''
    separator = '\r\n'
    
    def __init__(self, payload):
        self.payload = payload
        try:
            self.parseRequest()
        except:
            self.parseRequest('\n')
            separator = '\n'

    def parseRequest(self, separator="\r\n"):
        line = self.payload.split(separator, 1)
        try:
            self.method, self.uri, self.version = line[0].split(' ')
        except:
            self.method, self.uri = line[0].split(' ')
        head = ''
        if separator*2 in self.payload:
            head, body = self.payload.split(separator*2, 1)
            self.body = body
        else:
            head = self.payload
        heads = head.split(separator)
        self.uri = self.uri.replace('//', '/')

        if len(heads) < 2:
            return

        for line in heads[1:]:
            if not line:continue
            try:
                k, v = line.split(':', 1)
                self.headers.setdefault(k.lower(), v.strip())
            except:
                pass


    def __repr__(self):
        _str = '%s %s %s\n%s\n%s' % (
                self.method, self.uri, self.version, 
                json.dumps(self.headers), 
                self.body)
        return _str

class ResponseHttp(object):

    code = 200
    status = 'ok'
    version = 'HTTP/1.1'


    headers_raw = []
    headers = HEADERS
    body = http_body
    resp = ""

    def __init__(self, request, auto_add_item=True):
        self.request = request
        self.date = datetime.now().isoformat()
        self.seed = random.randint(0, 1)
        self.auto_add_item = auto_add_item

    def __repr__(self):
        if self.resp:
            return self.resp
        response_line = '%s %s %s' % (self.version, self.code, self.status)
        headers = [] 
        for k, v in self.headers.iteritems():
            headers.append('%s: %s' % (k, v))
        headers.extend(self.headers_raw)
        #if not self.body.endswith('\r\n'):
        #    self.body = "%s\r\n" % self.body

        if self.body and self.auto_add_item:
            content_len = len(self.body)
            headers.append('Content-Length: %s' % content_len)

        if self.auto_add_item:
            headers.sort()
        res = '%s\r\n%s\r\n\r\n%s' % (response_line, '\r\n'.join(headers), self.body)
        return res

    def defaultResponse(self):
        idx = random.randint(0, len(http_server)-1)
        server = http_server[idx]

        idx = random.randint(0, len(http_authenticate)-1)
        auth = http_authenticate[idx]

        idx = random.randint(0, len(http_code)-1)
        self.code = http_code[idx]

        self.headers['Server'] = server
        self.headers['Date'] = self.date
        self.headers['X-Powered-By'] = 'PHP/4.6.0'
        self.headers['X-Cache'] = 'MISS from Hello'
        self.headers['X-Cache-Lookup'] = 'MISS from Hello:8080'
        self.headers['X-Drupal-Cache'] = 'xHIT'
        self.headers['X-Drupal-Dynamic-Cache'] = 'MISS'
        self.headers['X-Generator'] = 'Drupal 8 (https://www.drupal.org)'
        self.headers['X-Content-Powered-By'] = 'K2 v2.8.0 (by JoomlaWor'
        self.headers['X-Jenkins'] = '2.121.3'
        self.headers['X-Jenkins-Session'] = 'f72d6619'

        self.headers_raw.append(auth)
        self.headers_raw.append('Location: http://192.168.0.1:52869/picsdesc.xml')
        if self.request.body:
            if self.request.body.startswith("cmd="):
                self.body = "610cker"
            else:
                self.body = self.request.body
        return


    def esResponse(self):
        body = ''

        uri = self.request.uri

        content_type = "application/json"
    
        if uri == '/':
            body = es.resBanner
        elif uri.startswith('/_nodes'):
            body = es.resNodes
        elif uri.startswith('/_cluster/stats'):
            es.resClusterStats['timestamp'] = int(time.time())
            body = es.resClusterStats
        elif uri.startswith('/_stats/indexing'):
            content_type = "text/plain"
            body = es.resStatsIndexing
        elif uri.startswith('/_cat/indices'):
            body = es.resCatIndices
        elif uri.startswith('/_search'):
            out = 'root'
            key = ''
            try:
                json_body = json.loads(self.request.body)
                key = json_body.get('script_fields', {}).keys()[0]
            except BaseException, e:
                sys.stderr.write("%s\n" % e)
            try:
                script = json_body.get('script_fields', {}).get(key, {}).get('script')
                tag = '.getRuntime().exec("'
                idx = script.find(tag)
                if idx != -1:
                    script = script[idx+len(tag):]
                    idx = script.find('"')
                    if idx != -1:
                        cmd = script[:idx]
                        cmds = cmd.split(' ')
                        if cmds[0] == 'echo':
                            out = cmds[1]
            except BaseException, e:
                sys.stderr.write("%s\n" % e)
            if key:
                es.resCmd['hits']['hits'][0]['fields'] = {key:out}
            body = es.resCmd #TODO 
        else:
            body = es.resBanner 

        if body:
            self.headers = {}
            self.headers_raw.append('Content-Type: %s; charset=UTF-8' % content_type)
            if content_type == "application/json":
                self.body = json.dumps(body)
            else:
                self.body = body

    def mctpResponse(self):
        self.version = 'V%s' % self.request.version
        self.headers = {}
        self.headers_raw.append('Content-Type: %s' % self.request.headers.get('content-type', 'text/HDP'))
        self.headers_raw.append('CSeq: %s' % self.request.headers.get('cseq', '6'))
        self.headers_raw.append('Return-Code: 0')

        segmentseq = self.request.headers.get('segment-seq')
        try:
            segmentseq = int(segmentseq)
            self.headers_raw.append('Segment-Seq: %s' % segmentseq)
            segmentseq += 1
            self.headers_raw.append('Segment-Num: %s' % segmentseq)
        except:
            pass
        self.body = 'eric\r\n111222\r\n111222\nadmin\r\n111222'
        self.headers_raw.append('Data-Length: %s' % len(self.body))

    def rtspResponse(self):
        self.version = '%s' % self.request.version
        self.headers = {}
        self.headers_raw.append('Content-Type: %s' % self.request.headers.get('accept', 'application/sdp'))
        self.headers_raw.append('CSeq: %s' % self.request.headers.get('cseq', '2'))
        self.headers_raw.append('Content-Base: %s' % self.request.uri)
        self.headers_raw.append('Return-Code: 0')
        self.body = 'm=video 0 RTP/AVP 96\r\na=control:streamid=0\r\na=range:npt=0-7.741000\r\na=length:npt=7.741000\r\na=StreamName:string;"hinted video track"\r\nm=audio 0 RTP/AVP 97\r\na=StreamName:string;"hinted audio track"'

    def jsonrpcResponse(self):
        self.version = '%s' % self.request.version
        self.headers = {}
        self.headers_raw.append('Content-Type: application/json')
        try:

            request = json.loads(self.request.body)
            isList = False
            if isinstance(request, list):
                isList = True
                request = request[0]
            result = jsonrpc.result.get(request.get('method', True))
            self.body = {}
            self.body['id'] = request.get('id')
            self.body['jsonrpc'] = request.get('jsonrpc')
            if result:
                self.body['result'] = result
            else:
                self.body = request
            if isList:
                self.body = [self.body]
            self.body = json.dumps(self.body)
        except BaseException, e:
            sys.stderr.write('jsonrpcResponse: %s\n' % str(e))

    def sipResponse(self):
        self.version = '%s' % self.request.version
        self.headers = self.request.headers 
        self.body = ''

    def phpadminResponse(self):
        self.headers = {}
        self.headers_raw.append('Content-Type:text/html; charset=UTF-8')
        self.headers_raw.append('Server:Apache')
        self.body = phpadmin.body


    def jbossResponse(self):
        self.headers = {}
        self.headers_raw.append('Content-Type:text/html; charset=UTF-8')
        self.headers_raw.append('Server:Apache')
        if self.seed != 1:
            self.code = 500
            self.status = "ServerError"
        self.body = "<html><head><title>Jboss jboss</title></head><body>Jboss jboss</body></html>"

    def mooResponse(self):
        self.headers = {}
        h = [
                'access-control-allow-origin:*',
                'cache-control:max-age=86400',
                'cf-cache-status:HIT',
                'cf-ray:3d8559d72f509354-SJC',
                'etag:"5a4ef825-a725"',
                'server:cloudflare-nginx',
                'status:200',
                'vary:Accept-Encoding',
                'via:1.1 vegur',
                ]
        self.headers_raw.extend(h)
        self.body = "<html><head><title>moo MOO</title></head><body>moo MOO</body></html>"

    def ipmiResponse(self):
        self.headers = {}
        h = [
                'SERVER: Linux/2.6.30.9-cig-4, UPnP/1.0, Portable SDK for UPnP devices/1.6.18',
                'CONNECTION: close',
                'CONTENT-TYPE: text/html',
                ]
        self.headers_raw.extend(h)
        if self.seed  == 1:
            self.body = '<html><body><h1>200 OK</h1></body></html>'
        else:
            self.code = 500
            self.status = 'Internal Server Error'
            self.body = '<html><body><h1>500 Internal Server Error</h1></body></html>'

    def intelAMTResponse(self):
        if self.seed  == 1:
            self.headers = {}
            h = [
                'Cache-Control:no cache',
                'Content-Type:text/html',
                'Server:Intel(R) Active Management Technology 9.1.30',
                ]
            self.headers_raw.extend(h)
            self.body='''<html><head><link rel="stylesheet" href="styles.css">
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
                <title>Intel&reg; Active Management Technology</title></head>
                <body>
                <table class="header">
                <tr><td valign="top" nowrap="nowrap">
                <p class="top1">Intel<font class="r"><sup>&reg;</sup></font> Active Management Technology</td>
                <td valign="top"><img src="logo.gif" align="right" alt="Intel"></td></tr>
                </table>

                <h1>Log On</h1>
                <P>Log on to Intel&reg; Active Management Technology on this computer.</p>
                <P><form METHOD="GET" action="index.htm"><h2><input type="submit" value="  Log On... ">
                </h2></form></p></body></html>
                '''

    def cbcmsResponse(self):
        self.headers['Server'] = 'Microsoft-IIS/6.0'
        self.headers['Date'] = self.date
        self.body = http_login_body

    def boaResponse(self):
        h = [
                'Accept-Ranges:bytes',
                'Connection:close',
                'Content-Type:text/html',
                'Server:Boa/0.94.14rc21',
                'Via:1.0 Hello (squid/3.1.23)',
                'X-Cache:MISS from Hello',
                'X-Cache:MISS from Hello',
                'X-Cache-Lookup:MISS from Hello:8080',
                'X-Cache-Lookup:MISS from Hello:8080',
                ]
        self.headers = {
                'Date':self.date,
                }
        self.headers_raw.extend(h)
        self.body = boa.boa

    def couchdbResponse(self):
        uri = self.request.uri.lower()
        h = [
                'Server:CouchDB/1.6.1 (Erlang OTP/17)',
                'Content-Type:application/json',
                ]
        self.headers = {
                'Date':self.date,
                }
        self.headers_raw.extend(h)

        if '/_users/org.couchdb.user' in uri:
            self.code = 201
            self.status = 'Created'
            reqbody = json.loads(self.request.body)
            user = reqbody.get('name', 'root')
            self.body = json.dumps({'ok':'true', 'id':"org.couchdb.user:%s" %  user, 'rev':'1-c0d78363e89f834bfaefa3a6dcdf0996'}) 
        elif '/_membership' in uri:
            self.code = 200
            self.status = 'ok'
            self.body = json.dumps({'all_nodes':["nonode@nohost"],'cluster_nodes':["nonode@nohost"]})
        else:
            self.body = json.dumps({'ok':'true', 'version':'1.6.1'})
    
    def belkinResponse(self):
        self.headers = {
                'Date':self.date,
                }

        uri = self.request.uri.lower()
        if '/langchg.cgi' in uri or '/adv_wifidef.cgi' in uri:
            h = belkin.H_HTML.split('\n')
            self.headers_raw.extend(h)
            self.body = belkin.passwd_leak
        elif '/dev.htm' in uri:
            h = belkin.H_HTML.split('\n')
            self.headers_raw.extend(h)
            self.body = belkin.shell
        else:
            h = belkin.H_TXT.split('\n')
            self.headers_raw.extend(h)
            self.body = 'returned error: -998'

    def dasanResponse(self):
        self.headers = {}
        h = [
                'Content-Type: text/html',
                'Content-Length: 357',
                'Connection: close',
                'Date: Tue, 04 Jan 2000 15:03:49 GMT',
                'Server: DasanNetwork Solution',
            ]
        self.headers_raw.extend(h)
        self.auto_add_item = False
        self.code = 411
        self.status = 'Length Required'
        self.body = '''<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
         "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <title>411 - Length Required</title>
 </head>
 <body>
  <h1>411 - Length Required</h1>
 </body>
</html>\n'''

    def tmpResponse(self):
        self.headers = {}
        h = [
                'Server: GoAhead-Webs',
                'Date: Mon Feb 12 05:43:01 2018',
                'WWW-Authenticate: Digest realm="WIFICAM", domain=":81",qop="auth", nonce="050eb5f249a24ed51d1a4a9a6e53fc61", opaque="5ccc069c403ebaf9f0171e9517f40e41",algorithm="MD5", stale="FALSE"',
                'Pragma: no-cache',
                'Cache-Control: no-cache',
                'Content-Type: text/html',
            ]
        self.headers_raw.extend(h)
        self.auto_add_item = False
        self.code = 401
        self.status = 'Unauthorized'
        self.body = '''<html><head><title>Document Error: Unauthorized</title></head>
		<body><h2>Access Error: Unauthorized</h2>
		<p>Access to this document requires a User ID</p></body></html>'''

    def a2billingResponse(self):
        self.headers = {
                'Date':self.date,
                'Last-Modified':self.date,
                }
        h = [
            'Server: Apache/2.2.22 (Debian)',
            'ETag: "a1d4c-66-4f9d3af853140"',
            'Accept-Ranges: bytes',
            'Vary: Accept-Encoding',
            ]
        if '/a2billing/common/javascript/misc.js' in self.request.uri:
            h.append('Content-Type: application/javascript')
            self.headers_raw.extend(h)
            self.body = '''\n\n\nfunction MM_openBrWindow(theURL,winName,features) {\n\treturn window.open(theURL,winName,features);\n}'''
        elif '/a2billing/customer/templates/default/css/popup.css' in self.request.uri:
            h.append('Content-Type: text/css')
            self.headers_raw.extend(h)
            self.body = '''#page-wrap {\n\tmin-width: 0;\n\t}'''
        else:
            self.defaultResponse()

    def etcdResponse(self):
        _id = '6e9e05c51164291d'
        self.headers = {
                'Date':self.date,
                'Content-Type': 'application/json'
                }
        body_stats = {
                "name":"trackerb",
                "id":_id,
                "state":"StateLeader",
                "startTime":"2017-09-30T14:58:56.28043498+08:00",
                "leaderInfo":{
                    "leader":_id,
                    "uptime":"4058h23m16.279194103s",
                    "startTime":"2017-09-30T14:58:57.080773283+08:00"
                    },
                "recvAppendRequestCnt":0,
                "sendAppendRequestCnt":0
                }
        body_members = {"members":[{"id":_id,"name":"trackerb","peerURLs":["http://localhost:2380"],"clientURLs":["http://10.126.99.79:2379","http://10.126.79.49:2379","http://127.0.0.1:4002"]}]}
        body = {}
        if '/v2/stats/self' in self.request.uri:
            body = body_stats
        elif '/v2/members' in self.request.uri:
            body = body_members
        self.body=json.dumps(body)

    def onvifResponse(self):
        self.headers = {
                'Date':self.date,
                }
        h = [
                'Server: DNVRS-Webs',
                'Cache-Control: no-cache',
                'Content-Type: application/soap+xml',
                'Connection: close'
                ]
        self.body = onvif.body

    def hbaseResponse(self):
        self.headers = {
                'Date':self.date,
                }
        h = [
                "Server: Jetty(6.1.26)",
                "Content-Type: text/html; charset=utf-8",
                "Pragma: no-cache",
                "Cache-Control: no-cache",
                ]
        self.headers_raw.extend(h)
        self.body = hp_hbase.body

    def mikrotikRouterOSResponse(self):
        self.code = 200
        self.status = 'ok'

        self.headers = {
                'Date':self.date,
                }
        h = [
                'Connection: Keep-Alive',
                'Content-Type: text/plain',
                'Expires: 0'
                ]
        #self.body = base64.b64decode('xIDEgMSAXcSAxIDEgMSAUlbCt8O6w4jCsg87J8Kdw4vCtcOpwr7DhjQ=')
        self.body = base64.b64decode('xIDEgMSAGcSAxIDEgMSAWMOkNgPEgMOKwqYlwqNiWMOVK8KtfRM=')
        self.headers_raw.extend(h)

    def ilOResponse(self):
        self.code = 201
        self.status = 'Created'

        self.headers = {
            "Server": "HP-iLO-Server/1.30",
            "ETag": "W/\"37B94ECA\"",
            "Link": "</rest/v1/AccountService/Accounts/3>; rel=self",
            "Location": "https://127.0.0.1:8081/rest/v1/AccountService/Accounts/3",
            "Cache-Control": "no-cache",
            'Date':self.date,
            "X-Frame-Options": "sameorigin",
            "X_HP-CHRP-Service-Version": "1.0.3",
            "Content-type": "application/json; charset=utf-8",
        }
        try:
            req = json.loads(self.request.body)
            self.body = json.dumps(HP_iLO.getResponse(req))
        except:
            pass

    def faviconResponse(self):
        self.code = 200
        self.status = 'ok'
        fd = open(PROJECT_HOME+'/favicon.ico', 'rb')
        buf = fd.read()
        fd.close()
        self.headers = {
                'Content-Type': 'image/x-icon'
                }
        self.body = buf

    def qRadarResponse(self):
        self.code = 200
        self.status = 'ok'
        body = {"exceptionMessageValue":"javax.servlet.ServletException: No valid forensics analysis solrDocIds parameter found."}
        self.body = json.dumps(body)

    def dockerResponse(self):
        uri = self.request.uri
        if '/containers/json' in uri:
            self.resp = docker.containers()
        else:
            self.resp = docker.version()

    def avtechResponse(self):
        '''
            #Advisory ID: CORE-2013-0726
            #https://www.coresecurity.com/advisories/avtech-dvr-multiple-vulnerabilities
        '''
        self.code = 200
        self.status = 'ok'
        self.headers = {
            'nServer': 'Linux/2.x UPnP/1.0 Avtech/1.0',
            'Expires': 0,
            'Pragma': 'no-cache',
            'Cache-Control': 'no-cache',
            'Connection': 'Keep-Alive',
            'Content-Type': 'text/html',
            'Set-Cookie': 'SSID=YWRtaW46MTIzNDVzYWph; path=/',
            'Date':self.date,
            }  
        uri = self.request.uri.lower()
        self.body = '0\nOK\n'
        #self.body = self.body + avtech.supervisor_cloud_setup
        if '//cgi-bin/supervisor/CloudSetup.cgi'.lower() in uri:
            self.body = self.body + avtech.supervisor_cloud_setup

    def omeMaticZentraleCCU2rceResponse(self):
        self.body = "VERSION=2.0.1" 

    def hadoopResponse(self):
        self.code = 200
        self.status = 'ok'

        self.headers = {
            'Content-Type': 'application/json',
            'Server': 'Jetty(6.1.26.hwx)',
            'Date':self.date,
            }

        if self.request.uri == '/ws/v1/cluster/apps/new-application':
            self.code = 200
            self.status = 'OK'
            ts = '%.04f' % time.time()
            ts = ts.replace('.', '_')
            _id = 'application_18%s' % (ts)
            app = {"application-id":_id,"maximum-resource-capability":{"memory":16384,"vCores":64}}
            self.body = json.dumps(app)
        else:
            res = {"status":"success"}
            self.body = json.dumps(res)

    #CVE-2018-11776
    def strutsPWN(self):
        uri =  self.request.uri
        uri = urllib2.unquote(uri)
        idx = uri.find('/${{')
        if idx == -1:
            return
        number = 0
        try:
            uri = uri[idx+4:]
            idx = uri.find("}}")
            data =  uri[:idx]
            m, n = data.split('*')
            number = int(m) * int(n)
        except:
            return
        h = [
                'Location: %s' % number
                ]
        self.headers_raw.extend(h)
    
    def bcmUPnPResponse(self):
        self.headers = {
                'Server': 'LINUX/2.4 UPnP/1.0 BRCM400/1.0',
                'CACHE-CONTROL': 'max-age=75',
                'EXT': '',
                'LOCATION': 'http://192.168.2.1:5431/igdevicedesc.xml',
                'ST': 'upnp:rootdevice',
                'USN': 'uuid:upnp-InternetGatewayDevice-1_0-00045a0f06aa::upnp:rootdevice'
                }
        if '/uuid' in self.request.uri:
            self.dyndevResponse()

    def dyndevResponse(self):
        self.code = 200
        self.status = 'ok'
        self.headers = {
                "DATE": self.date,
                'Connection': 'Close',
                'Server': 'LINUX/2.4 UPnP/1.0 BRCM400/1.0',
                #'Content-Type': 'text/xml; charset="utf-8"',
                'Content-Type': 'application/octet-stream',
                'EXT': '',
                }
        self.body = '''<?xml version="1.0"?>
<root xmlns="urn:schemas-upnp-org:device-1-0">
<specVersion>
<major>1</major>
<minor>0</minor>
</specVersion>
<URLBase>http://192.168.1.1:5431/</URLBase>
<device>
<deviceType>urn:schemas-upnp-org:device:InternetGatewayDevice:1</deviceType>
<presentationURL>http://192.168.1.1:80/</presentationURL>
<friendlyName>ONU Router</friendlyName>
<manufacturer>ZTE</manufacturer>
<manufacturerURL>http://www.com/</manufacturerURL>
<modelDescription>(null)</modelDescription>
<modelName>E8-C</modelName>
<modelNumber>1.0</modelNumber>
<modelURL>http://www.com/</modelURL>
<UDN>uuid:681ab2eb-8b10-108b-ebb2-1a681aeb100000</UDN>
<serviceList>
<service>
<serviceType>urn:schemas-upnp-org:service:Layer3Forwarding:1</serviceType>
<serviceId>urn:upnp-org:serviceId:Layer3Forwarding.1</serviceId>
<controlURL>/uuid:681ab2eb-8b10-108b-ebb2-1a681aeb100000/Layer3Forwarding:1</controlURL>
<eventSubURL>/uuid:681ab2eb-8b10-108b-ebb2-1a681aeb100000/Layer3Forwarding:1</eventSubURL>
<SCPDURL>/dynsvc/Layer3Forwarding:1.xml</SCPDURL>
</service>
</serviceList>
<deviceList>
<device>
<deviceType>urn:schemas-upnp-org:device:WANDevice:1</deviceType>
<friendlyName>WANDevice.1</friendlyName>
<manufacturer>ZTE</manufacturer>
<manufacturerURL>http://www.com/</manufacturerURL>
<modelDescription>(null)</modelDescription>
<modelName>E8-C</modelName>
<modelNumber>1.0</modelNumber>
<modelURL>http://www.com/</modelURL>
<UDN>uuid:681ab2eb-8b10-108b-ebb2-1a681aeb100001</UDN>
<serviceList>
<service>
<serviceType>urn:schemas-upnp-org:service:WANCommonInterfaceConfig:1</serviceType>
<serviceId>urn:upnp-org:serviceId:WANCommonInterfaceConfig.1</serviceId>
<controlURL>/uuid:681ab2eb-8b10-108b-ebb2-1a681aeb100001/WANCommonInterfaceConfig:1</controlURL>
<eventSubURL>/uuid:681ab2eb-8b10-108b-ebb2-1a681aeb100001/WANCommonInterfaceConfig:1</eventSubURL>
<SCPDURL>/dynsvc/WANCommonInterfaceConfig:1.xml</SCPDURL>
</service>
</serviceList>
<deviceList>
<device>
<deviceType>urn:schemas-upnp-org:device:WANConnectionDevice:1</deviceType>
<friendlyName>WanConnectionDevice.5</friendlyName>
<manufacturer>ZTE</manufacturer>
<manufacturerURL>http://www.com/</manufacturerURL>
<modelDescription>(null)</modelDescription>
<modelName>E8-C</modelName>
<modelNumber>1.0</modelNumber>
<modelURL>http://www.com/</modelURL>
<UDN>uuid:681ab2eb-8b10-108b-ebb2-1a681aeb100002</UDN>
<serviceList>
<service>
<serviceType>urn:schemas-upnp-org:service:WANPPPConnection:1</serviceType>
<serviceId>urn:upnp-org:serviceId:WANPPPConnection.2</serviceId>
<controlURL>/uuid:681ab2eb-8b10-108b-ebb2-1a681aeb100002/WANPPPConnection:1</controlURL>
<eventSubURL>/uuid:681ab2eb-8b10-108b-ebb2-1a681aeb100002/WANPPPConnection:1</eventSubURL>
<SCPDURL>/dynsvc/WANPPPConnection:1.xml</SCPDURL>
</service>
<service>
<serviceType>urn:schemas-upnp-org:service:WANPPPConnection:1</serviceType>
<serviceId>urn:upnp-org:serviceId:WANPPPConnection.1</serviceId>
<controlURL>/uuid:681ab2eb-8b10-108b-ebb2-1a681aeb100002/WANPPPConnection:1</controlURL>
<eventSubURL>/uuid:681ab2eb-8b10-108b-ebb2-1a681aeb100002/WANPPPConnection:1</eventSubURL>
<SCPDURL>/dynsvc/WANPPPConnection:1.xml</SCPDURL>
</service>
</serviceList>
</device>
</deviceList>
</device>
</deviceList>
</device>
</root>'''
        self.body = self.body.replace('\n', '\r\n')
        set_body = '''<?xml version="1.0"?>\r\n<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><m:SetConnectionTypeResponse xmlns:m="urn:schemas-upnp-org:service:WANPPPConnection:1"></m:SetConnectionTypeResponse></s:Body></s:Envelope>\r\n'''
        get_body = '''<?xml version="1.0"?>\r\n<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><m:GetConnectionTypeInfoResponse xmlns:m="urn:schemas-upnp-org:service:WANPPPConnection:1"><NewConnectionType>%(fmtstring)s</NewConnectionType><NewPossibleConnectionTypes></NewPossibleConnectionTypes></m:GetConnectionTypeInfoResponse></s:Body></s:Envelope>'''
        if '#GetConnectionTypeInfo' in self.request.payload:
            res = {'fmtstring':'.00000101.2AB46720.00000000.00430250.00413EF0.00000000.03000000.00000001.00000001.00000002'}
            self.body = get_body % res
        elif '#SetConnectionType' in self.request.payload:
            self.body = set_body
            self.headers['Connection'] = 'Keep-Alive'

    def orientdbResponse(self):
        self.code = 200
        self.status = 'ok'
        self.headers = {
                'Cache-Control': 'no-cache, no-store, max-age=0, must-revalidate\r\nPragma: no-cache',
                'Server': 'OrientDB Server v.2.2.29 (build 9914189f972103907c24377a1567897e68642920)',
                'Connection': 'Keep-Alive',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Credentials': 'true',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Allow-Methods': 'POST, GET, DELETE, HEAD, OPTIONS, PATCH, CONNECT, TRACE',
                'Content-Transfer-Encoding': 'binary',
                'Set-Cookie': 'OSESSIONID=OS1537962471048-6708162790969918236; Path=/; HttpOnly'
                }
        if self.request.uri == '/' or self.request.uri == '//':
            self.headers['Content-Type'] = 'text/html; charset=utf-8'
            self.body = '''
                <!--
                    ~ /*
                    ~  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)
                    ~  *
                    ~  *  Licensed under the Apache License, Version 2.0 (the "License");
                    ~  *  you may not use this file except in compliance with the License.
                    ~  *  You may obtain a copy of the License at
                    ~  *
                    ~  *       http://www.apache.org/licenses/LICENSE-2.0
                    ~  *
                    ~  *  Unless required by applicable law or agreed to in writing, software
                    ~  *  distributed under the License is distributed on an "AS IS" BASIS,
                    ~  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    ~  *  See the License for the specific language governing permissions and
                    ~  *  limitations under the License.
                    ~  *
                    ~  * For more information: http://www.orientechnologies.com
                        ~  */
                    -->

                    <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
                    <html>
                    <head>
                    <title>Redirecting to OrientDB Studio...</title>
                    <meta name="title" content="Document | DBMS | Database | Java | Studio" />
                    <meta name="description" content="OrientDB Studio" />
                    <meta http-equiv="refresh" content="0;URL=/studio/index.html">
                    <style type="text/css">
                    body {
                        font-size: 9pt;
                        font-family: Arial;
                    }
                    </style>
                    </head>
                    <body>Redirecting to OrientDB Studio...
                    </body>
                    </html>
                '''
        elif '/listDatabases' in self.request.uri:
            self.headers['Content-Type'] = 'application/json; charset=utf-8'
            self.body = json.dumps({"@type":"d","@version":0,"databases":["GratefulDeadConcerts","production","Radore"]})
        elif '/command' in self.request.uri:
            self.headers['Content-Type'] = 'application/json; charset=utf-8'
            b = {"result":[{"@type":"d","@version":0,"value":"rO0ABXNyADljb20ub3JpZW50ZWNobm9sb2dpZXMub3JpZW50LmNvcmUubWV0YWRhdGEuc2VjdXJpdHkuT1JvbGUAAAAAAAAAAQIAA0wABG1vZGV0AE9MY29tL29yaWVudGVjaG5vbG9naWVzL29yaWVudC9jb3JlL21ldGFkYXRhL3NlY3VyaXR5L09TZWN1cml0eVJvbGUkQUxMT1dfTU9ERVM7TAAKcGFyZW50Um9sZXQAO0xjb20vb3JpZW50ZWNobm9sb2dpZXMvb3JpZW50L2NvcmUvbWV0YWRhdGEvc2VjdXJpdHkvT1JvbGU7TAAFcnVsZXN0AA9MamF2YS91dGlsL01hcDt4cgA9Y29tLm9yaWVudGVjaG5vbG9naWVzLm9yaWVudC5jb3JlLm1ldGFkYXRhLnNlY3VyaXR5Lk9JZGVudGl0ea4eVS3CagTpAgAAeHIAN2NvbS5vcmllbnRlY2hub2xvZ2llcy5vcmllbnQuY29yZS50eXBlLk9Eb2N1bWVudFdyYXBwZXKTIMvqd2cQawIAAUwACGRvY3VtZW50dAA5TGNvbS9vcmllbnRlY2hub2xvZ2llcy9vcmllbnQvY29yZS9yZWNvcmQvaW1wbC9PRG9jdW1lbnQ7eHBzcgA3Y29tLm9yaWVudGVjaG5vbG9naWVzLm9yaWVudC5jb3JlLnJlY29yZC5pbXBsLk9Eb2N1bWVudAAAAAAAAAABDAAAeHIAOGNvbS5vcmllbnRlY2hub2xvZ2llcy5vcmllbnQuY29yZS5yZWNvcmQuT1JlY29yZEFic3RyYWN0FmOBv/w2q/ACAAhaAA9fY29udGVudENoYW5nZWRaAAZfZGlydHlJAA5fcmVjb3JkVmVyc2lvbkkABV9zaXplTAANX2RpcnR5TWFuYWdlcnQAPUxjb20vb3JpZW50ZWNobm9sb2dpZXMvb3JpZW50L2NvcmUvcmVjb3JkL2ltcGwvT0RpcnR5TWFuYWdlcjtMAAlfcmVjb3JkSWR0ADBMY29tL29yaWVudGVjaG5vbG9naWVzL29yaWVudC9jb3JlL2lkL09SZWNvcmRJZDtbAAdfc291cmNldAACW0JMAAdfc3RhdHVzdABDTGNvbS9vcmllbnRlY2hub2xvZ2llcy9vcmllbnQvY29yZS9kYi9yZWNvcmQvT1JlY29yZEVsZW1lbnQkU1RBVFVTO3hwegAAAVz/////AAAACgAEAAAAAAAAAAIAHspzAAABQQAKT1JvbGUIbW9kZQAAADoRGmluaGVyaXRlZFJvbGUAAAAAAApydWxlcwAAADsMCG5hbWUAAAE6BwAAFAcyZGF0YWJhc2UuY2x1c3Rlci5pbnRlcm5hbAAAATARBxBkYXRhYmFzZQAAATERByJkYXRhYmFzZS5mdW5jdGlvbgAAATIRBx5kYXRhYmFzZS5zY2hlbWEAAAEzEQcoZGF0YWJhc2UuY2xhc3Mub3VzZXIAAAE0EQcuZGF0YWJhc2Uuc3lzdGVtY2x1c3RlcnMAAAE1EQcgZGF0YWJhc2UuY2x1c3RlcgAAATYRByBkYXRhYmFzZS5jb21tYW5kAAABNxEHHGRhdGFiYXNlLmNsYXNzAAABOBEHKGRhdGFiYXNlLmhvb2sucmVjb3JkAAABORECAh8CDx8fHx8fDHdyaXRlcgB0AAtvbmV0X3Nlcl92MHh+cgBNY29tLm9yaWVudGVjaG5vbG9naWVzLm9yaWVudC5jb3JlLm1ldGFkYXRhLnNlY3VyaXR5Lk9TZWN1cml0eVJvbGUkQUxMT1dfTU9ERVMAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAxERU5ZX0FMTF9CVVRwc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAADHcIAAAAEAAAAAhzcgBLY29tLm9yaWVudGVjaG5vbG9naWVzLm9yaWVudC5jb3JlLm1ldGFkYXRhLnNlY3VyaXR5Lk9SdWxlJFJlc291cmNlR2VuZXJpYyQzvu6CmSRPG/oCAAB4cgBJY29tLm9yaWVudGVjaG5vbG9naWVzLm9yaWVudC5jb3JlLm1ldGFkYXRhLnNlY3VyaXR5Lk9SdWxlJFJlc291cmNlR2VuZXJpYwAAAAAAAAABAgACTAAKbGVnYWN5TmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO0wABG5hbWVxAH4AGHhwdAAQZGF0YWJhc2UuY2x1c3RlcnQAB0NMVVNURVJzcgA5Y29tLm9yaWVudGVjaG5vbG9naWVzLm9yaWVudC5jb3JlLm1ldGFkYXRhLnNlY3VyaXR5Lk9SdWxlAAAAAAAAAAECAANMAAZhY2Nlc3N0ABBMamF2YS9sYW5nL0J5dGU7TAAPcmVzb3VyY2VHZW5lcmljdABLTGNvbS9vcmllbnRlY2hub2xvZ2llcy9vcmllbnQvY29yZS9tZXRhZGF0YS9zZWN1cml0eS9PUnVsZSRSZXNvdXJjZUdlbmVyaWM7TAARc3BlY2lmaWNSZXNvdXJjZXNxAH4AA3hwc3IADmphdmEubGFuZy5CeXRlnE5ghO5Q9RwCAAFCAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cB9xAH4AGXNxAH4AFD9AAAAAAAAMdwgAAAAQAAAAAXQACGludGVybmFsc3EAfgAgAnhzcgBLY29tLm9yaWVudGVjaG5vbG9naWVzLm9yaWVudC5jb3JlLm1ldGFkYXRhLnNlY3VyaXR5Lk9SdWxlJFJlc291cmNlR2VuZXJpYyQyP+ehIoRkKjECAAB4cQB+ABd0AA5kYXRhYmFzZS5jbGFzc3QABUNMQVNTc3EAfgAccQB+ACJxAH4AJ3NxAH4AFD9AAAAAAAAMdwgAAAAQAAAAAXQABW91c2Vyc3EAfgAgD3hzcgBLY29tLm9yaWVudGVjaG5vbG9naWVzLm9yaWVudC5jb3JlLm1ldGFkYXRhLnNlY3VyaXR5Lk9SdWxlJFJlc291cmNlR2VuZXJpYyQ3f3cckr7UITICAAB4cQB+ABd0ABBkYXRhYmFzZS5jb21tYW5kdAAHQ09NTUFORHNxAH4AHHEAfgAicQB+AC9zcQB+ABQ/QAAAAAAAAHcIAAAAEAAAAAB4c3IATGNvbS5vcmllbnRlY2hub2xvZ2llcy5vcmllbnQuY29yZS5tZXRhZGF0YS5zZWN1cml0eS5PUnVsZSRSZXNvdXJjZUdlbmVyaWMkMTCQmBKgb95v1wIAAHhxAH4AF3QAF2RhdGFiYXNlLnN5c3RlbWNsdXN0ZXJzdAAOU1lTVEVNX0NMVVNURVJzcQB+ABxxAH4AInEAfgA1c3EAfgAUP0AAAAAAAAB3CAAAABAAAAAAeHNyAEtjb20ub3JpZW50ZWNobm9sb2dpZXMub3JpZW50LmNvcmUubWV0YWRhdGEuc2VjdXJpdHkuT1J1bGUkUmVzb3VyY2VHZW5lcmljJDXx9m0+1cZMFgIAAHhxAH4AF3QACGRhdGFiYXNldAAIREFUQUJBU0VzcQB+ABxxAH4AJXEAfgA7c3EAfgAUP0AAAAAAAAB3CAAAABAAAAAAeHNyAEtjb20ub3JpZW50ZWNobm9sb2dpZXMub3JpZW50LmNvcmUubWV0YWRhdGEuc2VjdXJpdHkuT1J1bGUkUmVzb3VyY2VHZW5lcmljJDY67a3vuFy2bAIAAHhxAH4AF3QAD2RhdGFiYXNlLnNjaGVtYXQABlNDSEVNQXNxAH4AHHEAfgAlcQB+AEFzcQB+ABQ/QAAAAAAAAHcIAAAAEAAAAAB4c3IAS2NvbS5vcmllbnRlY2hub2xvZ2llcy5vcmllbnQuY29yZS5tZXRhZGF0YS5zZWN1cml0eS5PUnVsZSRSZXNvdXJjZUdlbmVyaWMkOQDbgztEmBptAgAAeHEAfgAXdAAUZGF0YWJhc2UuaG9vay5yZWNvcmR0AAtSRUNPUkRfSE9PS3NxAH4AHHEAfgAicQB+AEdzcQB+ABQ/QAAAAAAAAHcIAAAAEAAAAAB4c3IAS2NvbS5vcmllbnRlY2hub2xvZ2llcy5vcmllbnQuY29yZS5tZXRhZGF0YS5zZWN1cml0eS5PUnVsZSRSZXNvdXJjZUdlbmVyaWMkMTD/WE1ugCI8AgAAeHEAfgAXdAARZGF0YWJhc2UuZnVuY3Rpb250AAhGVU5DVElPTnNxAH4AHHEAfgAicQB+AE1zcQB+ABQ/QAAAAAAAAHcIAAAAEAAAAAB4eA==","@fieldTypes":"value=u"}]}
            self.body = json.dumps(b)

    def getResponse(self):
        port_map = {
                '9200':self.esResponse,
                '49152':self.ipmiResponse,
                '16992':self.intelAMTResponse,
                '5984':self.couchdbResponse,
                '5431':self.bcmUPnPResponse,
                '2480':self.orientdbResponse,
                }

        url_map = {
                #jboss
                r'^/invoker/readonly.*':self.jbossResponse,
                r'^/invoker/JMXInvokerServlet.*':self.jbossResponse,
                r'^/web-console/ServerInfo.jsp.*':self.jbossResponse,
                r'^/jmx-console/HtmlAdaptor.*':self.jbossResponse,

                r'.*/scripts/setup\.php.*':self.phpadminResponse,
                r'^/news/admin/login\.aspx.*':self.cbcmsResponse,
                r'^/langchg\.cgi$':self.belkinResponse,
                r'^/adv_wifidef\.cgi$':self.belkinResponse,
                r'^/dev\.htm$':self.belkinResponse,
                r'^/proxy\.cgi\?chk&':self.belkinResponse,
                r'^/cgi-bin/login_action\.cgi$':self.dasanResponse,
                r'^/ForensicsAnalysisServlet/':self.qRadarResponse,
                }

        host = self.request.headers.get('host')
        port = 80
        try:
            host, port = host.split(':')
        except:
            pass
        port = str(port)

        version = self.request.version.lower()
        uri = self.request.uri.lower()
        uri.replace('//', '/')

        setResponse = None
        if 'mctp/' in version:
            setResponse = self.mctpResponse
        elif 'rtsp/' in version:
            setResponse = self.rtspResponse
        elif port == '2375' and ('/version' in uri or '/containers/json' in uri):
            setResponse = self.dockerResponse
        elif 'sip/' in version:
            setResponse = self.sipResponse
        elif '"jsonrpc":' in self.request.body:
            setResponse = self.jsonrpcResponse
        elif '/favicon.ico' == uri:
            setResponse = self.faviconResponse
        elif 'cgi-bin/login.cgi' in uri:
                setResponse = self.boaResponse
        elif '/a2billing/' in uri:
            setResponse = self.a2billingResponse
        elif '/v2/' in uri and port == '2379':
            setResponse = self.etcdResponse
        elif '/master-status' in uri and port == '16010':
            setResponse = self.hbaseResponse
        elif '/onvif/device_service' == uri:
            setResponse = self.onvifResponse
        elif '/jsproxy' == uri:
            setResponse = self.mikrotikRouterOSResponse
        elif '/rest/v1/accountservice/accounts' == uri:
            setResponse = self.ilOResponse
        elif '/cgi-bin/nobody/VerifyCode.cgi?'.lower() in uri or '/cgi-bin/user/Config.cgi?'.lower() in uri or '/cgi-bin/supervisor/CloudSetup.cgi?'.lower() in uri or '/cgi-bin/supervisor/adcommand.cgi'.lower() in uri:
            setResponse = self.avtechResponse
        elif '/api/backup/version.cgi' == uri:
            setResponse = self.omeMaticZentraleCCU2rceResponse
        elif '/ws/v1/cluster/apps' in uri and self.request.method == 'POST':
            setResponse = self.hadoopResponse
        elif port_map.get(port):
            setResponse = port_map.get(port)
        elif '/$%7b%7b' in uri and '%7d%7d/' in uri:
            setResponse = self.strutsPWN
        else:
            for reg, func in url_map.iteritems():
                regex = re.compile(reg, re.I)
                if regex.match(uri):
                    setResponse = func
                    break
        if not setResponse:
            setResponse = self.defaultResponse
            #setResponse = self.tmpResponse
        setResponse()
        return self.__repr__()

def main(payload):
    req = Request(payload)
    res = ResponseHttp(req)
    data = res.getResponse()
    sys.stdout.write('%s' % data)

def usage():
    fn = basename(sys.argv[0])
    s = StringIO()
    s.write("%s [options] payload\n" % fn)
    s.write("\t%s 'R0VUIC8gSFRUUC8xLjENCkhvc3Q6IDEyNy4wL' -d\n" % fn)
    s.seek(0)
    return s.read()

def parseOption():
    parser = optparse.OptionParser(usage=usage())
    parser.add_option("-d", "--debug", action="store_true", dest="debug", default=False, help="Debug")
    return parser

if __name__ == '__main__':
    parser = parseOption()
    options, args = parser.parse_args()
    payload = ''
    if options.debug:
        import zlib
        testpayload = base64.b64decode(args[0])
        payload = zlib.decompress(testpayload)
        sys.stderr.write('%s\n\n' % str(payload))
    elif len(args) > 0:
        payload = base64.b64decode(args[0])
    else:
        sys.exit(1)
    try:
        main(payload)
    except BaseException, e:
        sys.stderr.write('%s\n' % str(e))
        sys.exit(2)
    sys.exit(0)
